// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Collections.Generic;
using System.IO;

namespace SmartParking
{
    public partial class BeaconsController : NSViewController
    {
        List<CarData> cars = new List<CarData>();
        string type = "Car1";

        public BeaconsController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            getData();
        }

        partial void Save(Foundation.NSObject sender)
        {
            var name = Name.StringValue;
            var ID = menu.StringValue;

            if (name == "" || menu.StringValue == "" || name == null)
            {
                error.Hidden = false;
                return;
            }

            bool addNew = true;

            foreach (var car in cars)
            {
                if (car.name == name)
                {
                    foreach (var c in cars)
                    {
                        if (ID == c.ID && car.name != c.name)
                        {
                            error.Hidden = false;
                            return;
                        }
                    }

                    car.ID = ID;
                    car.type = type;


                    addNew = false;
                    break;
                }
            }

            if (addNew)
            {
                CarData newCar = new CarData();
                newCar.name = name;
                newCar.ID = ID;
                newCar.type = type;

                foreach (var car in cars)
                {
                    if (newCar.ID == car.ID)
                    {
                        error.Hidden = false;
                        return;
                    }
                }

                cars.Add(newCar);
            }

            string[] writeLines = new string[cars.Count];
            int i = 0;
            foreach (var car in cars)
            {
                writeLines[i] = car.name + "," + car.ID + "," + car.type;
                i++;
            }

            File.WriteAllLines(@"CarData.txt", writeLines);
            PerformSegue("BackToParking", this);
            View.Window.Close();

        }

        partial void Cancel(Foundation.NSObject sender)
        {
            PerformSegue("BackToParking", this);
            View.Window.Close();
        }

        partial void Delete(Foundation.NSObject sender)
        {
            var name = Name.StringValue;

            string[] writeLines = new string[cars.Count];
            int i = 0;

            foreach (var car in cars)
            {
                if (car.name != name)
                {
                    writeLines[i] = car.name + "," + car.ID + "," + car.type;
                    i++;
                }
            }

            File.WriteAllLines(@"CarData.txt", writeLines);
            PerformSegue("BackToParking", this);
            View.Window.Close();
        }

        void getData()
        {
            foreach (var id in Parking.beaconsList)
            {
                menu.Add(new NSCell(id.ToString()));
            }

            var lines = File.ReadAllLines(@"CarData.txt");
            
            foreach (var line in lines)
            {
                if (line == "")
                    continue;

                CarData car = new CarData();
                string[] data = line.Split(',');

                car.name = data[0];
                car.ID = data[1];
                car.type = data[2];
                cars.Add(car);

                Name.Add(new NSCell(car.name));
            }
        }

        partial void menuAction(Foundation.NSObject sender)
        {
            var name = Name.StringValue;

            foreach (var car in cars)
            {
                if(name == car.name)
                {
                    menu.StringValue = car.ID;

                    switch (car.type)
                    {
                        case "Car1":
                            Button1(this);
                            break;

                        case "Car2":
                            Button2(this);
                            break;

                        case "Car3":
                            Button3(this);
                            break;

                        default:
                            break;
                    }
                }

            }
        }

        partial void Button1(Foundation.NSObject sender)
		{
			var Location = new CoreGraphics.CGPoint(Car1.Frame.X - 9, Car1.Frame.Y - 10);
            Selection.Frame = new CoreGraphics.CGRect(Location, Selection.Frame.Size);
            type = "Car1";
		}

        partial void Button2(Foundation.NSObject sender)
		{
            var Location = new CoreGraphics.CGPoint(Car2.Frame.X - 9, Car2.Frame.Y - 10);
            Selection.Frame = new CoreGraphics.CGRect(Location, Selection.Frame.Size);
            type = "Car2";
        }

        partial void Button3(Foundation.NSObject sender)
		{
            var Location = new CoreGraphics.CGPoint(Car3.Frame.X - 9, Car3.Frame.Y - 10);
            Selection.Frame = new CoreGraphics.CGRect(Location, Selection.Frame.Size);
            type = "Car3";
        }
    }
}
